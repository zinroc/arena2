var Promise = Promise || require("bluebird");

var utils = require("../utils.js");




var popCap = 10;
/**
 * Interacts with character state
 * Requires knex when loaded
 */
module.exports = function (knex) {
    this.knex = knex;



    return {
        /**
        * Get characterInfo
        * currently not called
        */
        get: function (){
            return knex("characters")
            .select("*")
            .then(function (rows){
                return rows;
            })
        },
        /**
        * Get characterInfo
        * currently called from client
        */
        getPlayerCharacters: function (email){
            return knex("characters")
            .where("owner", email)
            .select("*")
            .then(function (rows){
                return rows;
            })
        },
        /**
        * Create a character
        * Called from server.
        */
        create: function (name){
            return knex("characters")
            .insert({name: name})
            .returning("id")
            .then(function (rows){
                return rows[0];
            });
        },
        /**
        * Create a character owned by a player
        * Called from client
        */
        createPlayerCharacter: function (email, name){
            return knex("characters")
            .insert({name: name, owner: email})
            .returning("id")
            .then(function (rows){
                return rows[0];
            });
        },
        /*
        * Called from server.
        */
        createPop: function (){

            return this.get()
            .then(function (characterArr){
                var charactersForCreation = popCap - characterArr.length;
                var promises = [];
                for (var i=0; i<charactersForCreation; i++){
                    var name = utils.newName();
                    var characterStore = require("./characterStore.js")(knex);
                    promises[i] = characterStore.create(name);
                }
                return Promise.all(promises);
            }).then(function (ids){
                return ids;
            });
        },

    };
};