rromise = Promise || require("bluebird");

var utils = require("../utils.js");

var popCap = 10;
/**
 * Interacts with character state
 * Requires knex when loaded
 */
module.exports = function (knex) {
    this.knex = knex;

    return {

        /**
        * Get characterInfo
        * currently not called
        */
        get: function (){
            return knex("characters")
            .select("*")
            .then(function (rows){
                return rows;
            })
        },
        /**
        * Get characterInfo
        * currently called from client
        */
        getPlayerCharacters: function (email){
            return knex("characters")
            .where("owner", email)
            .select("*")
            .then(function (rows){
                return rows;
            })
        },
        /**
        * Create a character
        * Called from server.
        */
        create: function (name){
            return knex("characters")
            .insert({name: name})
            .returning("id")
            .then(function (rows){
                return rows[0];
            });
        },
        /**
        * Create a character owned by a player
        * STRING name
        * Called from client
        */
        createPlayerCharacter: function (email, name, family_name){
            return knex("characters")
            .insert({name: name, family_name: family_name, owner: email})
            .returning("id")
            .then(function (rows){
                return rows[0];
            });
        },
        /**
        * Delete a character owned by a player
        * INT id from characters(id)
        * Called from client
        */
        deletePlayerCharacter: function (email, id){
            return knex("characters")
            .where({owner: email, id: id})
            .del()
            .then(function (){
                return true;
            });
        },
        /**
        * Spawn a character owned by a player into a location
        * INT id from characters(id)
        *  STRING location 
        * Called from client
        * Called from server when characters traveling
        */
        spawnPlayerCharacter: function (email, id, location){
            return knex("characters")
            .where({owner: email, id: id})
            .update({location: location})
            .then(function (){
                return true;
            });
        },
        /*
        * Called from server.
        * supplies a regular population to the world.
        */
        createPop: function (){
            return this.get()
            .then(function (characterArr){
                var charactersForCreation = popCap - characterArr.length;
                var promises = [];
                for (var i=0; i<charactersForCreation; i++){
                    var name = utils.newName();
                    var characterStore = require("./characterStore.js")(knex);
                    promises[i] = characterStore.create(name);
                }
                return Promise.all(promises);
            }).then(function (ids){
                return ids;
            });
        },
        /**
        *   Called by server
        *  Called every timestep
        */
        arriveAtDestination: function (){
            return knex("characters")
            .whereRaw('destination = location')
            .update({destination: null, direction: null, travel_success: null, travel_progress: null})
            .then(function (){
                return true;
            });
        },
        /**
        *   Called by server
        *   Called every tmestep
        *   currently all travelers are successful
        */
        findSuccessfulTravelers: function (){
            return knex("characters")
            .whereNotNull("destination")
            .update({travel_success: 'true'})
            .then(function(){
                return true;
            });
        },
        /**
        *   Called by server
        *   Called every new timestep
        */
        moveTravelers: function (){
            return knex("regions")
            .then(function (regionsArr){
                var promises = [];
                for (var i=1; i<regionsArr.length-1; i++){//edge case at regionArr[0] going west and regionsArr[max] going east
                    var promiseIndex = i-1; 
                    var eastRegion = regionsArr[i+1];
                    var region = regionsArr[i];
                    promises[promiseIndex] = knex("characters") // move characters east
                                                .where({location: region.name, direction: 'east', travel_success: 'true'})
                                                .update({location: eastRegion.name, travel_success: null});
                                            
                }

                for (var j=1; j<(regionsArr.length-1); j++) {
                    promiseIndex++; 
                    var westRegion = regionsArr[j-1];
                    var region = regionsArr[j]; 
                    promises[promiseIndex] = knex("characters") // move characters west
                                                .where({location: region.name, direction: 'west', travel_success: 'true'})
                                                .update({location: westRegion.name, travel_success: null});
                                        

                }

                //edgecase of regionsArr[0] moving west (and east)
                promiseIndex ++; 
                eastRegion = regionsArr[1];
                westRegion =regionsArr[regionsArr.length-1];
                region = regionsArr[0]; 

                promises[promiseIndex] = knex("characters") //catch characters at region[0] moving west
                                            .where({location: region.name, direction: 'west', travel_success: 'true'})
                                            .update({location: westRegion.name, travel_success: null}); 
                                        
                promiseIndex++;

                promises[promiseIndex] = knex("characters")//catch characters at region[0] moving east
                                            .where({location: region.name, direction: "east", travel_success: 'true'})
                                            .update({location: eastRegion.name, travel_success: null});
                                        
                promiseIndex++;

                eastRegion = regionsArr[0]; 
                westRegion = regionsArr[regionsArr.length-2];
                region = regionsArr[regionsArr.length-1];

                promises[promiseIndex] = knex("characters")//catch characters at region[max] moving west
                                            .where({location: region.name, direction: 'west', travel_success: 'true'})
                                            .update({location: westRegion.name, travel_success: null}); 
                                        
                promiseIndex++;

                promises[promiseIndex] = knex("characters")//catch characters at region[max] moving east
                                          .where({location: region.name, direction: "east", travel_success: 'true'})
                                          .update({location: eastRegion.name, travel_success: null});
                                    

                return Promise.all(promises);
            }).then(function (){
                return true;
            });
        },
        /**
        * Called from client
        *   @params email STRING
        *   @params id INT refrences characters(id)
        *   @params destination STRING
        */
        travel: function (email, id, destination, direction){
            return knex("characters")
            .where({owner: email, id: id}) 
            .whereNot({location: destination}) // make sure you are not traveling to current location
            .update({destination: destination, travel_progress: 0, direction: direction})
            .then(function () {
                return true;
            });
        }

    };
};